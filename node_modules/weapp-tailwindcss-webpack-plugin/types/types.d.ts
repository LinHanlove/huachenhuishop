import type { InjectPreflight } from './postcss/preflight';
import type { Rule } from "../node_modules/postcss";
export declare type AppType = 'uni-app' | 'taro' | 'remax' | 'rax' | 'native' | 'kbone' | 'mpx' | undefined;
export interface IPropValue {
    prop: string;
    value: string;
}
export declare type CssPresetProps = 'box-sizing' | 'border-width' | 'border-style' | 'border-color';
export declare type CssPreflightOptions = {
    [key: CssPresetProps | string]: string | false;
} | false;
declare type RequiredStyleHandlerOptions = {
    isMainChunk: boolean;
    cssInjectPreflight: InjectPreflight;
    cssPreflightRange: 'view' | 'all';
};
export declare type CustomRuleCallback = (node: Rule, options: Readonly<RequiredStyleHandlerOptions>) => void;
export declare type StyleHandlerOptions = {
    customRuleCallback?: CustomRuleCallback;
} & RequiredStyleHandlerOptions;
export interface UserDefinedOptions {
    htmlMatcher?: (name: string) => boolean;
    cssMatcher?: (name: string) => boolean;
    jsMatcher?: (name: string) => boolean;
    mainCssChunkMatcher?: (name: string, appType: AppType) => boolean;
    cssPreflight?: CssPreflightOptions;
    cssPreflightRange?: 'view' | 'all';
    customRuleCallback?: CustomRuleCallback;
    onLoad?: () => void;
    onStart?: () => void;
    onUpdate?: (filename: string) => void;
    onEnd?: () => void;
}
export declare type InternalPostcssOptions = Pick<UserDefinedOptions, 'cssMatcher' | 'mainCssChunkMatcher' | 'cssPreflight'>;
export interface TaroUserDefinedOptions extends UserDefinedOptions {
    framework: 'react' | 'vue' | 'vue3' | string;
}
export interface RawSource {
    start: number;
    end: number;
    raw: string;
    source?: string;
}
export {};
